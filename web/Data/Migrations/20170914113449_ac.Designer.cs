// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using web.Data;
using web.Models;

namespace web.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20170914113449_ac")]
    partial class ac
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("web.Data.CarInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AreaRange");

                    b.Property<string>("BossId")
                        .HasMaxLength(128);

                    b.Property<int>("CarStatus");

                    b.Property<int>("CarType");

                    b.Property<long>("CheckTime");

                    b.Property<string>("Desc")
                        .HasMaxLength(256);

                    b.Property<int>("DestinationCity");

                    b.Property<int>("DestinationCounty");

                    b.Property<int>("DestinationLevel6");

                    b.Property<int>("DestinationProvince");

                    b.Property<int>("DestinationTown");

                    b.Property<int>("DestinationVillage");

                    b.Property<double>("Height");

                    b.Property<string>("ImagePath");

                    b.Property<int>("InZone");

                    b.Property<long>("JoinTime");

                    b.Property<double>("LongSize");

                    b.Property<string>("Name")
                        .HasMaxLength(8);

                    b.Property<string>("Phone")
                        .HasMaxLength(11);

                    b.Property<double>("PosX");

                    b.Property<double>("PosY");

                    b.Property<double>("Price");

                    b.Property<string>("Title")
                        .HasMaxLength(64);

                    b.Property<string>("UserId")
                        .HasMaxLength(128);

                    b.Property<string>("VideoPath");

                    b.Property<int>("Weight");

                    b.Property<double>("Width");

                    b.HasKey("Id");

                    b.ToTable("Carinfo");
                });

            modelBuilder.Entity("web.Data.CerealsBossData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CarStatus");

                    b.Property<int>("CarType");

                    b.Property<double>("CerealsCount");

                    b.Property<int>("CerealsType");

                    b.Property<long>("CheckTime");

                    b.Property<string>("Desc")
                        .HasMaxLength(256);

                    b.Property<string>("EndPoint")
                        .HasMaxLength(32);

                    b.Property<int>("InZone");

                    b.Property<long>("JoinTime");

                    b.Property<string>("Name")
                        .HasMaxLength(8);

                    b.Property<long>("NeedTime");

                    b.Property<string>("Phone")
                        .HasMaxLength(11);

                    b.Property<double>("Price");

                    b.Property<string>("StartPoint")
                        .HasMaxLength(32);

                    b.Property<string>("Title")
                        .HasMaxLength(64);

                    b.Property<string>("UserId")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.ToTable("CerealsBossData");
                });

            modelBuilder.Entity("web.Data.DealCarData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Auto");

                    b.Property<string>("Brand")
                        .HasMaxLength(16);

                    b.Property<int>("BuyOrSell");

                    b.Property<int>("CarBrand");

                    b.Property<int>("CarStatus");

                    b.Property<int>("CarType");

                    b.Property<long>("CheckTime");

                    b.Property<string>("Desc")
                        .HasMaxLength(256);

                    b.Property<double>("Displacement");

                    b.Property<int>("InZone");

                    b.Property<long>("JoinTime");

                    b.Property<string>("Name")
                        .HasMaxLength(8);

                    b.Property<string>("Phone")
                        .HasMaxLength(11);

                    b.Property<double>("Price");

                    b.Property<int>("Procedure");

                    b.Property<long>("RegTime");

                    b.Property<double>("RunRoadCount");

                    b.Property<string>("Title")
                        .HasMaxLength(64);

                    b.Property<string>("UserId")
                        .HasMaxLength(128);

                    b.Property<double>("Years");

                    b.HasKey("Id");

                    b.ToTable("DealCarData");
                });

            modelBuilder.Entity("web.Data.DriverData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BigCarType");

                    b.Property<int>("CarStatus");

                    b.Property<int>("CarType");

                    b.Property<long>("CheckTime");

                    b.Property<string>("Desc")
                        .HasMaxLength(256);

                    b.Property<int>("DriverCarType");

                    b.Property<int>("DriverCardType");

                    b.Property<int>("DriverYears");

                    b.Property<int>("Gender");

                    b.Property<int>("InZone");

                    b.Property<long>("JoinTime");

                    b.Property<string>("Name")
                        .HasMaxLength(8);

                    b.Property<string>("Phone")
                        .HasMaxLength(11);

                    b.Property<double>("Price");

                    b.Property<string>("Title")
                        .HasMaxLength(64);

                    b.Property<int>("TljDriverCardType");

                    b.Property<string>("UserId")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.ToTable("DriverData");
                });

            modelBuilder.Entity("web.Data.HireData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AgeRequired");

                    b.Property<int>("CarStatus");

                    b.Property<int>("CarType");

                    b.Property<long>("CheckTime");

                    b.Property<string>("Desc")
                        .HasMaxLength(256);

                    b.Property<int>("GenderRequired");

                    b.Property<int>("InZone");

                    b.Property<long>("JoinTime");

                    b.Property<string>("Name")
                        .HasMaxLength(8);

                    b.Property<int>("PayType");

                    b.Property<int>("PersonCount");

                    b.Property<string>("Phone")
                        .HasMaxLength(11);

                    b.Property<double>("Price");

                    b.Property<long>("StartTime");

                    b.Property<string>("Title")
                        .HasMaxLength(64);

                    b.Property<string>("UserId")
                        .HasMaxLength(128);

                    b.Property<int>("WorkStrong");

                    b.Property<string>("WorkTime")
                        .HasMaxLength(32);

                    b.Property<int>("WorkType");

                    b.HasKey("Id");

                    b.ToTable("HireData");
                });

            modelBuilder.Entity("web.Data.ReapCarData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Brand");

                    b.Property<int>("CarCount");

                    b.Property<int>("CarStatus");

                    b.Property<int>("CarType");

                    b.Property<long>("CheckTime");

                    b.Property<string>("Desc")
                        .HasMaxLength(256);

                    b.Property<int>("InZone");

                    b.Property<long>("JoinTime");

                    b.Property<double>("Land");

                    b.Property<string>("Name")
                        .HasMaxLength(8);

                    b.Property<string>("Phone")
                        .HasMaxLength(11);

                    b.Property<double>("Price");

                    b.Property<int>("ReapCarType");

                    b.Property<string>("Title")
                        .HasMaxLength(64);

                    b.Property<string>("UserId")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.ToTable("ReapCarData");
                });

            modelBuilder.Entity("web.Data.ResumeData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("BirthDay");

                    b.Property<int>("CarStatus");

                    b.Property<int>("CarType");

                    b.Property<long>("CheckTime");

                    b.Property<string>("CurPoint")
                        .HasMaxLength(128);

                    b.Property<string>("Desc")
                        .HasMaxLength(256);

                    b.Property<int>("Gender");

                    b.Property<int>("InZone");

                    b.Property<string>("JiGuan")
                        .HasMaxLength(128);

                    b.Property<long>("JoinTime");

                    b.Property<string>("Name")
                        .HasMaxLength(8);

                    b.Property<string>("Phone")
                        .HasMaxLength(11);

                    b.Property<double>("Price");

                    b.Property<string>("Title")
                        .HasMaxLength(64);

                    b.Property<string>("UserId")
                        .HasMaxLength(128);

                    b.Property<string>("WorkPoint")
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.ToTable("ResumeData");
                });

            modelBuilder.Entity("web.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("web.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("web.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("web.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("web.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
